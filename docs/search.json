[{"path":"/articles/Vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"An introduction to mbkmeans","text":"install package, please use following.","code":"if (!requireNamespace(\"BiocManager\"))     install.packages(\"BiocManager\") BiocManager::install(\"mbkmeans\")"},{"path":"/articles/Vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An introduction to mbkmeans","text":"vignette provides introductory example work mbkmeans package, contains implementation mini-batch k-means algorithm proposed (Sculley 2010) large single-cell sequencing data. algorithm runs _k_means iterations small, random subsamples data (``mini batches’’) rather entire dataset. speeds computation reduces amount data must contained memory. main function used users mbkmeans. implemented S4 generic methods implemented matrix, Matrix, HDF5Matrix, DelayedMatrix, SummarizedExperiment, SingleCellExperiment. work inspired MiniBatchKmeans() function implemented ClusterR R package re-use many C++ functions implemented . main contribution provide interface DelayedArray HDF5Array packages mbkmeans algorithm brings memory time “mini-batches” needed current iteration, never requires loading entire dataset memory. allows user run mini-batch k-means algorithm large datasets fit entirely memory. mbkmeans also runs seamlessly -memory matrices provided user, significantly increases speed algorithm compared standard k-means algorithm ((Hicks et al. 2020)). complete comparison mbkmeans implementations can found (Hicks et al. 2020). motivation work clustering large single-cell RNA-sequencing (scRNA-seq) datasets, hence main focus Bioconductor’s SingleCellExperimentand SummarizedExperiment data container. reason, mbkmeans assumes data representation typical genomic data, genes (variables) rows cells (observations) column. contrary statistical applications, notably stats::kmeans() ClusterR::MiniBatchKmeans() functions assume observations rows. provide lower-level mini_batch() function expects observations rows expected direct replacement ClusterR::MiniBatchKmeans() -disk data representations HDF5 files. rest document shows typical use case mbkmeans() interface; users interested mini_batch() function refer manual page.","code":""},{"path":"/articles/Vignette.html","id":"example-dataset","dir":"Articles","previous_headings":"Introduction","what":"Example dataset","title":"An introduction to mbkmeans","text":"illustrate typical use case, use pbmc4k dataset TENxPBMCData package. dataset contains set 4,000 cells peripheral blood healthy donor expected contain many types clusters cell. note mbkmeans designed large datasets, particular datasets large enough either full data matrix can’t held memory, computations necessary computed. vignette works small dataset allow user quickly follow along understand commands. (Hicks et al. 2020) shows example using mbkmeans dataset 1.3 million cells, appropriate size observing improved memory usage improved speed. First, load needed packages. Note vignette, aim identifying biologically meaningful clusters (entail sophisticated normalization data dimensionality reduction), instead aim show run mini-batch k-means HDF5-backed matrix. normalize data simply scaling total number counts using scater select 1,000 variable genes random set 100 cells speed-computations.","code":"library(TENxPBMCData) library(scater) library(SingleCellExperiment) library(mbkmeans) library(DelayedMatrixStats) tenx_pbmc4k <- TENxPBMCData(dataset = \"pbmc4k\")  set.seed(1034) idx <- sample(seq_len(NCOL(tenx_pbmc4k)), 100) sce <- tenx_pbmc4k[, idx]  #normalization sce <- logNormCounts(sce)  vars <- rowVars(logcounts(sce)) names(vars) <- rownames(sce) vars <- sort(vars, decreasing = TRUE)  sce1000 <- sce[names(vars)[1:1000],]  sce1000 ## class: SingleCellExperiment  ## dim: 1000 100  ## metadata(0): ## assays(2): counts logcounts ## rownames(1000): ENSG00000090382 ENSG00000204287 ... ENSG00000117748 ##   ENSG00000135968 ## rowData names(3): ENSEMBL_ID Symbol_TENx Symbol ## colnames: NULL ## colData names(12): Sample Barcode ... Date_published sizeFactor ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0):"},{"path":"/articles/Vignette.html","id":"mbkmeans","dir":"Articles","previous_headings":"","what":"mbkmeans","title":"An introduction to mbkmeans","text":"main function, mbkmeans(), returns list object including centroids, WCSS_per_cluster (WCSS stands within-cluster-sum--squares), best_initialization, iters_per_initiazation Clusters. takes matrix-like object input, SummarizedExperiment, SingleCellExperiment, matrix, DelayedMatrix HDF5Matrix. example, input SingleCellExperiment object. number clusters (k k-means algorithm) set clusters argument. case, set clusters = 5 particular reason. SingleCellExperiment objects, function provides reduceMethod whichAssay arguments. reduceMethod argument specify dimensionality reduction slot use clustering, default “PCA”. Note perform PCA looks slot called “PCA” already stored object. Alternatively, one can specify whichAssay assay use input mini-batch k-means. used reduceMethod option NA. See ?mbkmeans details.","code":"res <- mbkmeans(sce1000, clusters = 5,                 reduceMethod = NA,                 whichAssay = \"logcounts\")"},{"path":"/articles/Vignette.html","id":"choice-of-arguments","dir":"Articles","previous_headings":"mbkmeans","what":"Choice of arguments","title":"An introduction to mbkmeans","text":"additional arguements mbkmeans() make function flexible suitable situations.","code":""},{"path":"/articles/Vignette.html","id":"batch-size","dir":"Articles","previous_headings":"mbkmeans > Choice of arguments","what":"Batch size","title":"An introduction to mbkmeans","text":"size mini batches set batch_size argument. argument gives size samples data brought memory one time, thus constrains memory usage alogrithm. blocksize() function can used set batch size maximum allowed available memory. considers number columns dataset amount RAM current matchine calculate large batch size reasonable RAM available session. calculation uses get_ram() function benchmarkme package. See benchmarkme vignette details. simple example, whole data fits memory, default batch size single batch size 100. (Hicks et al. 2020) provides comparison effect batch size large datasets (.e. full data stored memory). results show algorithm robust large range batch sizes (1,000-10,000 cells): accuracy results equivalent batch size 500-1000 cells, noticable advantage memory usage speed long batches smaller roughly 10,000 cells (corresponding subsample full data matrix whose memory foot print noticeable modern computers). reason, err larger range batch size suggested (Hicks et al. 2020) – 10,000 cells. Furthermore, since initialization uses default number cells batch size, gives robust sample determining initial start point. note better make choices batch size based choosing absolute number cells batch rather choosing batch size based percentage overall sample size. batch size chosen based percentage cells, large datasets use large batches cells, negating memory speed gains. Moreover large batches needed good performance algorithm. continual resampling batches works like stochastic gradient descent allows (local) minimization objective function (Sculley 2010) relatively small batch sizes, demonstrated single-cell data work (Hicks et al. 2020). anything, size batch governed complexity problem (e.g. number underlying true clusters subtypes), rather number overall cells dataset.","code":"batchsize <- blocksize(sce1000) batchsize ## [1] 100"},{"path":"/articles/Vignette.html","id":"initialization","dir":"Articles","previous_headings":"mbkmeans > Choice of arguments","what":"Initialization","title":"An introduction to mbkmeans","text":"performance mini-batch k-means greatly depends process initialization. implemented two different initialization methods: Random initialization, regular k-means; kmeans++, proposed (Arthur Vassilvitskii 2007). default “kmeans++”. percentage data use initialization centroids set init_fraction argument, larger 0 less 1. default value given proportion matches value batch_size, converted proportion data. Note large values init_fraction result proportion data held memory used initialization kmeans++ algorithm. Therefore, large values init_fraction require great deal memory – potentially used actual clustering algorithm. Indeed keeping fraction used constant larger larger datasets result commiserate numbers cells used initialization increasing memory usage (similar issues discussed batch size). Therefore, recommend users keep default make changes batch_size parameter desired, ensuring consistent memory usage across initialization stage actual clustering stage algorithm. mentioned discussion batch_size, reason recommend batch_size larger range suggested reasonable (Hicks et al. 2020) improve initialization.","code":"res_random <- mbkmeans(sce1000, clusters = 5,                  reduceMethod = NA,                 whichAssay = \"logcounts\",                 initializer = \"random\") table(res$Clusters, res_random$Clusters) ##     ##      1  2  3  4  5 ##   1  0  0  0  0  1 ##   2  0  0  1  0  0 ##   3  4  0 23  0  0 ##   4  0  0  0  0  4 ##   5  0  5  0 14 48"},{"path":"/articles/Vignette.html","id":"running-mbkmeans-with-multiple-values-of-k","dir":"Articles","previous_headings":"mbkmeans","what":"Running mbkmeans with multiple values of \\(k\\)","title":"An introduction to mbkmeans","text":"main parameter set \\(k\\)-means variants number clusters \\(k\\). mbkmeans quick enough rerun clustering algorithm different number clusters even large datasets. , apply mbkmeans \\(k\\) 5 15 select number clusters using elbow method (.e., value corresponds point inflection curve). note just rule thumb selecting number clusters, many different methods exist decide appropriate value \\(k\\). speed computations, cluster top 20 PCs.  plot, seems k = 12 reasonable value.","code":"sce1000 <- runPCA(sce1000, ncomponents=20)  ks <- seq(5, 15) res <- lapply(ks, function(k) {     mbkmeans(sce1000, clusters = k,              reduceMethod = \"PCA\",              calc_wcss = TRUE, num_init=10) })  wcss <- sapply(res, function(x) sum(x$WCSS_per_cluster)) plot(ks, wcss, type = \"b\")"},{"path":"/articles/Vignette.html","id":"comparison-with-k-means","dir":"Articles","previous_headings":"","what":"Comparison with k-means","title":"An introduction to mbkmeans","text":"Note set init_fraction = 1, initializer = \"random\", batch_size = ncol(x), recover classic k-means algorithm. Note however, since two algorithms start different random initializations, always converge solution. Furthremore, algorithm uses batches smaller full dataset (batch_size<ncol(x)), mbkmeans converge result kmeans even initialization. due fact kmeans mbkmeans different search paths optimum problem non-convex. comparison memory usage, speed, accuracy mbkmeans kmeans non-trivial case algorithm uses batches, see (Hicks et al. 2020), demonstrated mbkmeans provides significant speed improvements uses less memory kmeans, without loss accuracy.","code":"res_full <- mbkmeans(sce1000, clusters = 5,                      reduceMethod = NA,                      whichAssay = \"logcounts\",                      initializer = \"random\",                      batch_size = ncol(sce1000)) res_classic <- kmeans(t(logcounts(sce1000)),                        centers = 5) table(res_full$Clusters, res_classic$cluster) ##     ##      1  2  3  4  5 ##   1  0  7  0  7  0 ##   2  0  0 14 43  0 ##   3  2  0  0  0  0 ##   4 16  0  0  0 10 ##   5  0  0  0  1  0"},{"path":"/articles/Vignette.html","id":"use-with-bluster","dir":"Articles","previous_headings":"","what":"Use with bluster","title":"An introduction to mbkmeans","text":"bluster package provides flexible extensible framework clustering Bioconductor packages/workflows. clusterRows() function controls dispatch different clustering algorithms. case, use mini-batch k-means algorithm cluster cells cell populations based principal component analysis (PCA) coordinates. following three scenarios, pass number cluster centers number using centers=5 argument. addition, can also pass mbkmeans arguments (e.g. batch_size=10). first two cases, return cluster labels. However, third scenario, ask full mbkmeans output. many times clustering performed -memory data (example PCA), clusterRows function also accepts matrix-like object (-memory -disk data representation) mbkmeans accepts. example, can cluster using mbkmeans logcounts assay sce1000 object (similar ), DelayedMatrix object DelayedArray package. Note: transpose matrix clusterRows function expects observations along rows variables along columns.","code":"mat <- reducedDim(sce1000, \"PCA\") dim(mat) ## [1] 100  20 library(bluster) clusterRows(mat, MbkmeansParam(centers=5)) ##   [1] 2 5 5 3 5 4 3 1 1 3 5 2 5 1 1 1 3 5 1 3 2 1 5 5 1 3 1 1 5 1 3 5 4 1 2 1 4 ##  [38] 5 5 4 5 4 5 4 5 3 1 3 5 5 5 2 1 3 2 5 4 1 4 3 5 4 1 1 3 5 2 4 5 4 1 5 4 1 ##  [75] 5 3 1 5 3 1 2 1 4 1 2 5 4 5 1 1 5 1 4 2 4 5 2 5 1 2 ## Levels: 1 2 3 4 5 clusterRows(mat, MbkmeansParam(centers=5, batch_size=10)) ##   [1] 3 3 3 3 3 3 3 5 5 3 3 1 3 5 5 5 3 3 5 3 4 5 3 3 5 3 5 5 3 5 3 3 4 5 1 5 4 ##  [38] 3 3 3 3 3 3 3 3 3 5 3 3 3 3 1 5 3 1 3 3 5 4 3 3 4 5 5 3 3 3 3 3 3 2 3 3 5 ##  [75] 3 3 5 3 3 5 4 5 3 5 1 3 4 3 5 5 3 5 3 3 3 3 3 3 5 4 ## Levels: 1 2 3 4 5 clusterRows(mat, MbkmeansParam(centers=5, batch_size=10), full = TRUE) ## $clusters ##   [1] 5 5 5 5 5 5 5 1 1 5 5 2 5 1 1 1 5 5 3 5 5 1 5 5 1 5 1 1 5 1 5 5 5 1 2 1 5 ##  [38] 5 5 5 5 5 5 5 5 5 1 5 5 5 5 2 1 5 2 5 5 1 5 5 5 5 1 1 5 5 5 5 5 5 1 5 5 1 ##  [75] 5 5 1 5 5 1 5 1 5 1 2 5 5 5 1 1 5 1 5 5 5 5 4 5 1 5 ## Levels: 1 2 3 4 5 ##  ## $objects ## $objects$mbkmeans ## $objects$mbkmeans$centroids ##            [,1]       [,2]      [,3]       [,4]      [,5]       [,6]       [,7] ## [1,] -15.010417 -0.7962079 -4.968180  2.7679840 -0.605855 -0.2194566  1.4958129 ## [2,]   1.398788 15.2268393  4.914318  8.7031508 -0.624902 -2.6562225  0.8620272 ## [3,] -17.543300 -0.3406707 -6.138011  4.3145411  1.079512  0.6031462 -3.6588221 ## [4,]   3.505305  9.0542211  4.008002  0.8464335 -1.494348 -5.7764435  3.4572454 ## [5,]   4.953126 -5.2662492  1.885661 -0.1000841  1.303848 -0.6517419  0.3327930 ##            [,8]       [,9]      [,10]      [,11]     [,12]      [,13] ## [1,] -0.6686381  0.7806568 -1.1359341  1.1528491 -1.407013  1.5457278 ## [2,] -3.2219319 -3.0456175 -0.2216553 -1.8928053  5.403923 -2.9907297 ## [3,]  8.2619290 -4.0679099 -3.2909212  5.7171778  8.625866  4.8241775 ## [4,] -3.3455593 -2.0061982 -1.3108509 -9.4799142  1.971986  9.3333830 ## [5,] -0.4513868 -1.7769361 -1.2359026  0.4449523  0.151892 -0.9781383 ##           [,14]      [,15]      [,16]       [,17]      [,18]     [,19] ## [1,]  1.6981873  3.2334236  0.7828917 -0.11174810 -0.7921813 -2.095090 ## [2,] -1.0326219 -0.3752647 -2.2624371 -2.48013343 -2.6617969  2.687306 ## [3,]  0.2712364 -1.0289170  5.9773702  2.34843263 -1.5557200  3.698316 ## [4,]  0.8668148  1.5455810  1.8839526  4.15320464 -2.9828210 -2.413375 ## [5,]  2.0870510 -1.4041611  0.3987755  0.06157393 -0.6216171  0.435778 ##            [,20] ## [1,]  0.12527754 ## [2,]  2.21443762 ## [3,] -2.67774700 ## [4,] -0.06607878 ## [5,]  0.77234827 ##  ## $objects$mbkmeans$WCSS_per_cluster ## numeric(0) ##  ## $objects$mbkmeans$best_initialization ## [1] 1 ##  ## $objects$mbkmeans$iters_per_initialization ##      [,1] ## [1,]   17 ##  ## $objects$mbkmeans$Clusters ##   [1] 5 5 5 5 5 5 5 1 1 5 5 2 5 1 1 1 5 5 3 5 5 1 5 5 1 5 1 1 5 1 5 5 5 1 2 1 5 ##  [38] 5 5 5 5 5 5 5 5 5 1 5 5 5 5 2 1 5 2 5 5 1 5 5 5 5 1 1 5 5 5 5 5 5 1 5 5 1 ##  [75] 5 5 1 5 5 1 5 1 5 1 2 5 5 5 1 1 5 1 5 5 5 5 4 5 1 5 logcounts(sce1000) ## <1000 x 100> sparse matrix of class DelayedMatrix and type \"double\": ##                      [,1]      [,2]      [,3] ...     [,99]    [,100] ## ENSG00000090382  0.000000  1.482992  0.000000   . 5.4330604 0.0000000 ## ENSG00000204287  2.198815  0.000000  0.000000   . 5.3387971 0.0000000 ## ENSG00000163220  1.762993  1.482992  0.000000   . 2.1176311 2.0642508 ## ENSG00000143546  0.000000  1.135438  1.113099   . 0.3825221 0.0000000 ## ENSG00000019582  3.402730  1.762861  1.733874   . 6.2009459 2.0642508 ##             ...         .         .         .   .         .         . ## ENSG00000145779 0.0000000 0.6766523 0.0000000   . 0.9342195 0.0000000 ## ENSG00000106948 0.0000000 1.1354382 0.0000000   . 0.9342195 1.3735556 ## ENSG00000155660 0.0000000 0.6766523 0.0000000   . 0.3825221 1.3735556 ## ENSG00000117748 0.0000000 0.0000000 0.0000000   . 0.0000000 0.0000000 ## ENSG00000135968 0.0000000 0.0000000 0.0000000   . 0.3825221 0.0000000 clusterRows(t(logcounts(sce1000)), MbkmeansParam(centers=4)) ##   [1] 2 2 2 1 2 2 1 3 3 1 2 2 2 3 3 3 1 2 3 1 2 3 2 2 3 1 3 3 2 3 1 2 2 3 2 3 2 ##  [38] 2 2 2 2 2 2 2 2 1 3 1 2 2 2 2 3 1 2 4 2 3 2 1 2 2 3 3 1 2 2 2 2 2 3 2 2 3 ##  [75] 2 1 3 2 1 3 2 3 2 3 2 2 2 2 3 3 2 3 2 2 2 2 2 2 3 2 ## Levels: 1 2 3 4"},{"path":"/articles/Vignette.html","id":"working-with-on-disk-data-in-bioconductor","dir":"Articles","previous_headings":"","what":"Working with on-disk data in Bioconductor","title":"An introduction to mbkmeans","text":"vignette focused use mbkmeans package. users interested learning working HDF5 files -disk data Bioconductor, recommend excellent DelayedArray workshop, presented Peter Hickey Bioc2020.","code":""},{"path":[]},{"path":"/articles/example_analysis.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Example analysis","text":"","code":"plot(1:10)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yuwei Ni. Author, copyright holder. Davide Risso. Author, maintainer, copyright holder. Stephanie Hicks. Author, copyright holder. Elizabeth Purdom. Author, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"S. Hicks, R. Liu, Y. Ni, E. Purdom D. Risso (2020). mbkmeans: fast clustering single cell data using mini-batch k-means. bioRxiv. https://doi.org/10.1101/2020.05.27.119438","code":"@Article{,   title = {mbkmeans: fast clustering for single cell data using mini-batch k-means},   author = {Stephanie Hicks and Ruoxi Liu and Yuwei Ni and Elizabeth Purdom and Davide Risso},   year = {2020},   journal = {bioRxiv},   url = {https://doi.org/10.1101/2020.05.27.119438}, }"},{"path":"/index.html","id":"mbkmeans-mini-batch-k-means-clustering-for-single-cell-rna-seq","dir":"","previous_headings":"","what":"Mini-batch K-means Clustering for Single-Cell RNA-seq","title":"Mini-batch K-means Clustering for Single-Cell RNA-seq","text":"package implements mini-batch k-means algorithm large datasets, including support -disk data representation. method described details paper: S. Hicks, R. Liu, Y. Ni, E. Purdom, D. Risso (2021). mbkmeans: Fast clustering single cell data using mini-batch k-means. PLOS Computational Biology.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mini-batch K-means Clustering for Single-Cell RNA-seq","text":"virtually cases, installing Bioconductor recommended. rare event need development version GitHub, use following.","code":"if (!requireNamespace(\"BiocManager\", quietly=TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"mbkmeans\") library(devtools) BiocManager::install(\"drisso/mbkmeans\")"},{"path":"/reference/MbkmeansParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Mini-batch k-means clustering — MbkmeansParam","title":"Mini-batch k-means clustering — MbkmeansParam","text":"Run mini-batch k-means mbkmeans function specified number centers within clusterRows bluster Bioconductor package.","code":""},{"path":"/reference/MbkmeansParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mini-batch k-means clustering — MbkmeansParam","text":"","code":"MbkmeansParam(centers, ...)"},{"path":"/reference/MbkmeansParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mini-batch k-means clustering — MbkmeansParam","text":"centers integer scalar specifying number centers. Alternatively, function takes number observations returns number centers.  Note, mbkmeans function uses argument clusters argument represent argument.  However, use centers match ... arguments pass mbkmeans.","code":""},{"path":"/reference/MbkmeansParam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mini-batch k-means clustering — MbkmeansParam","text":"function deprecated. Please use MbkmeansParam function bluster Bioconductor package.","code":""},{"path":"/reference/blocksize.html","id":null,"dir":"Reference","previous_headings":"","what":"blocksize — blocksize","title":"blocksize — blocksize","text":"Return maximum number rows use based amount ram memory.","code":""},{"path":"/reference/blocksize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blocksize — blocksize","text":"","code":"blocksize(data, ram = get_ram())"},{"path":"/reference/blocksize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blocksize — blocksize","text":"data matrix-like object. ram max amount ram (bytes) use.","code":""},{"path":"/reference/blocksize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"blocksize — blocksize","text":"Numeric value maximum number rows.","code":""},{"path":"/reference/blocksize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"blocksize — blocksize","text":"","code":"data <- matrix(NA, nrow = 100, ncol=1000) blocksize(data, ram=1e6) #> [1] 625"},{"path":"/reference/clusterRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster rows of a matrix — clusterRows","title":"Cluster rows of a matrix — clusterRows","text":"Cluster rows matrix-like object variety algorithms.","code":""},{"path":"/reference/clusterRows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster rows of a matrix — clusterRows","text":"function deprecated. Please use clusterRows function bluster Bioconductor package.","code":""},{"path":"/reference/compute_wcss.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Whithin-Cluster Sum of Squares — compute_wcss","title":"Compute Whithin-Cluster Sum of Squares — compute_wcss","text":"Given vector cluster labels, matrix centroids, dataset, computes WCSS.","code":""},{"path":"/reference/compute_wcss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Whithin-Cluster Sum of Squares — compute_wcss","text":"","code":"compute_wcss(clusters, cent, data)"},{"path":"/reference/compute_wcss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Whithin-Cluster Sum of Squares — compute_wcss","text":"clusters numeric vector cluster assignments. cent numeric matrix centroids (clusters rows, variables columns). data matrix-like object containing data (numeric integer).","code":""},{"path":"/reference/compute_wcss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Whithin-Cluster Sum of Squares — compute_wcss","text":"numeric vector value WCSS per cluster.","code":""},{"path":"/reference/compute_wcss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Whithin-Cluster Sum of Squares — compute_wcss","text":"","code":"data = matrix(1:30,nrow = 10) cl <- mini_batch(data, 2, 10, 10) compute_wcss(cl$Clusters, cl$centroids, data) #> [1] 30 30"},{"path":"/reference/mbkmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","title":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","text":"implementation mini-batch k-means algorithm   Sculley (2010) large single cell sequencing data   dimensionality reduction results input reducedDim() slot.","code":""},{"path":"/reference/mbkmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","text":"","code":"mbkmeans(x, ...)  # S4 method for SummarizedExperiment mbkmeans(x, whichAssay = 1, ...)  # S4 method for SingleCellExperiment mbkmeans(x, reduceMethod = \"PCA\", whichAssay = 1, ...)  # S4 method for LinearEmbeddingMatrix mbkmeans(x, ...)  # S4 method for ANY mbkmeans(   x,   clusters,   batch_size = min(500, NCOL(x)),   max_iters = 100,   num_init = 1,   init_fraction = batch_size/NCOL(x),   initializer = \"kmeans++\",   compute_labels = TRUE,   calc_wcss = FALSE,   early_stop_iter = 10,   verbose = FALSE,   CENTROIDS = NULL,   tol = 1e-04,   BPPARAM = BiocParallel::SerialParam(),   ... )"},{"path":"/reference/mbkmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","text":"x object run mini-batch k-means. can matrix-like object (e.g., matrix, Matrix, DelayedMatrix, HDF5Matrix) genes rows samples columns. Specialized methods defined SummarizedExperiment SingleCellExperiment. ... passed `blockApply`. whichAssay assay use input mini-batch k-means. x SingleCellExperiment, ignored unless reduceMethod = NA. reduceMethod Name dimensionality reduction results use input mini-batch k-means. Set NA use full matrix. clusters number clusters batch_size size mini batches. default, equals minimum number observations 500. max_iters maximum number clustering iterations num_init number times algorithm run different centroid seeds init_fraction proportion data use initialization centroids (applies initializer kmeans++ ). float number 0.0 1.0. default, uses relative batch size. initializer method initialization. One kmeans++ random. See details information compute_labels logcical indicating whether compute final cluster labels. calc_wcss logical indicating whether per-cluster WCSS computed. Ignored `compute_labels = FALSE`. early_stop_iter continue many iterations calculation best within-cluster-sum--squared-error verbose either TRUE FALSE, indicating whether progress printed clustering CENTROIDS matrix initial cluster centroids. rows CENTROIDS matrix equal number clusters columns equal columns data tol float number. , case iteration (iteration > 1 iteration < max_iters) 'tol' greater squared norm centroids, kmeans converged BPPARAM See `BiocParallel` package. label assignment done parallel.","code":""},{"path":"/reference/mbkmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","text":"list following attributes: centroids, WCSS_per_cluster,   best_initialization, iters_per_initialization. list following attributes: centroids, WCSS_per_cluster,  best_initialization, iters_per_initialization","code":""},{"path":"/reference/mbkmeans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","text":"implementation largely based   MiniBatchKmeans function ClusterR   package. contribution package provide support -disk   data representations HDF5, use DelayedMatrix   HDF5Matrix objects, well sparse data representation   classes Matrix package. also provide   high-level methods objects class SummarizedExperiment,   SingleCellExperiment, LinearEmbeddingMatrix. function performs k-means clustering using mini batches. kmeans++: kmeans++ initialization. Reference : http://theory.stanford.edu/~sergei/papers/kMeansPP-soda.pdf http://stackoverflow.com/questions/5466323/-exactly--k-means-work random: random selection data rows initial centroids","code":""},{"path":"/reference/mbkmeans.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","text":"Sculley. Web-Scale K-Means Clustering. WWW 2010, April 26–30,   2010, Raleigh, North Carolina, USA. ACM 978-1-60558-799-8/10/04. https://github.com/mlampros/ClusterR","code":""},{"path":"/reference/mbkmeans.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","text":"Lampros Mouselimis Yuwei Ni","code":""},{"path":"/reference/mbkmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mini-Batch k-means for large single cell sequencing data — mbkmeans","text":"","code":"library(SummarizedExperiment) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians se <- SummarizedExperiment(matrix(rnorm(100), ncol=10)) mbkmeans(se, clusters = 2) #> $centroids #>             [,1]       [,2]       [,3]       [,4]      [,5]       [,6] #> [1,] -0.86233366 -0.1930144  0.6247238 -0.1342908 0.0651359 -0.5407030 #> [2,] -0.09849951 -0.9753502 -0.2598674  0.1835491 0.9668127 -0.6430539 #>            [,7]        [,8]       [,9]      [,10] #> [1,] -0.4014151  0.07637861 -0.7058427 -0.7009525 #> [2,]  1.2406141 -1.71585792  0.6492191  1.1677006 #>  #> $WCSS_per_cluster #> numeric(0) #>  #> $best_initialization #> [1] 1 #>  #> $iters_per_initialization #>      [,1] #> [1,]    2 #>  #> $Clusters #>  [1] 1 1 2 1 1 1 1 2 1 1 #>  library(SingleCellExperiment) sce <- SingleCellExperiment(matrix(rnorm(100), ncol=10)) mbkmeans(sce, clusters = 2, reduceMethod = NA) #> $centroids #>           [,1]       [,2]       [,3]       [,4]       [,5]        [,6] #> [1,] 0.6842993  0.1386736 -0.4185955 0.44005471 -0.3672732 -0.06780258 #> [2,] 1.0046457 -0.6963494 -0.1473858 0.05162198  0.4315053  0.67613734 #>           [,7]       [,8]       [,9]      [,10] #> [1,] 0.3516456  0.1282004 -0.4356472  0.1168733 #> [2,] 1.4198397 -1.4370986 -0.2415942 -0.9297087 #>  #> $WCSS_per_cluster #> numeric(0) #>  #> $best_initialization #> [1] 1 #>  #> $iters_per_initialization #>      [,1] #> [1,]    2 #>  #> $Clusters #>  [1] 1 1 1 2 1 1 1 1 1 2 #>  x<-matrix(rnorm(100), ncol=10) mbkmeans(x,clusters = 3) #> $centroids #>             [,1]       [,2]       [,3]       [,4]       [,5]       [,6] #> [1,] -0.81011435 -0.8828415  1.0545466 -0.7624309 -0.1317222  0.4530511 #> [2,] -0.07964226  0.1615282 -0.9620170  0.1830597 -0.6721411 -1.1632454 #> [3,]  0.42792790  0.6814623  0.2438877 -0.6567995  0.7017171 -0.5291350 #>             [,7]       [,8]       [,9]       [,10] #> [1,]  1.13921503 -0.2021040 -0.2100428 -0.38370619 #> [2,] -0.08921928  0.3774196  0.6599757 -0.53591208 #> [3,] -0.78414344 -0.3207443  0.1097594  0.01639013 #>  #> $WCSS_per_cluster #> numeric(0) #>  #> $best_initialization #> [1] 1 #>  #> $iters_per_initialization #>      [,1] #> [1,]    2 #>  #> $Clusters #>  [1] 1 3 3 3 2 3 3 2 1 2 #>"},{"path":"/reference/mini_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Mini_batch — mini_batch","title":"Mini_batch — mini_batch","text":"Mini-batch-k-means matrix-like objects","code":""},{"path":"/reference/mini_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mini_batch — mini_batch","text":"","code":"mini_batch(   data,   clusters,   batch_size,   max_iters,   num_init = 1L,   init_fraction = 1,   initializer = \"kmeans++\",   compute_labels = TRUE,   calc_wcss = FALSE,   early_stop_iter = 10L,   verbose = FALSE,   CENTROIDS = NULL,   tol = 1e-04 )"},{"path":"/reference/mini_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mini_batch — mini_batch","text":"data numeric integer matrix-like object. clusters number clusters. batch_size size mini batches. max_iters maximum number clustering iterations. num_init number times algorithm run different centroid seeds. init_fraction percentage data use initialization centroids (applies initializer kmeans++ ). float number 0.0 1.0. initializer method initialization. One kmeans++ random. See details information. compute_labels logical indicating whether compute final cluster labels. calc_wcss logical indicating whether within-cluster sum squares computed returned (ignored `compute_labels = FALSE`). early_stop_iter continue many iterations calculation best within-cluster-sum--squared-error. verbose logical indicating whether progress printed screen. CENTROIDS optional matrix initial cluster centroids. rows CENTROIDS matrix equal number clusters columns equal columns data. tol convergence tolerance.","code":""},{"path":"/reference/mini_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mini_batch — mini_batch","text":"list following attributes: centroids: final centroids; WCSS_per_cluster (optional): final per-cluster WCSS. best_initialization: initialization value led best WCSS solution; iters_per_initialization: number iterations per initialization; Clusters (optional): final cluster labels.","code":""},{"path":"/reference/mini_batch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mini_batch — mini_batch","text":"function performs k-means clustering using mini batches. inspired implementation https://github.com/mlampros/ClusterR. input matrix can format supported `DelayedArray` / `beachmat` framework, including matrix classes defined `Matrix` package `HDFMatrix` class. two possible initializations. kmeans++: kmeans++ initialization. random: random selection data rows initial centroids.","code":""},{"path":"/reference/mini_batch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mini_batch — mini_batch","text":"Sculley, D., 2010, April. Web-scale k-means clustering. Proceedings 19th international conference World wide web (pp. 1177-1178). ACM. Arthur, D. Vassilvitskii, S., 2007, January. k-means++: advantages careful seeding. Proceedings eighteenth annual ACM-SIAM symposium Discrete algorithms (pp. 1027-1035). Society Industrial Applied Mathematics.","code":""},{"path":"/reference/mini_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mini_batch — mini_batch","text":"","code":"data = matrix(1:30,nrow = 10) mini_batch(data, 2, 10, 10) #> $centroids #>      [,1] [,2] [,3] #> [1,]    8   18   28 #> [2,]    3   13   23 #>  #> $WCSS_per_cluster #> numeric(0) #>  #> $best_initialization #> [1] 1 #>  #> $iters_per_initialization #>      [,1] #> [1,]    2 #>  #> $Clusters #>  [1] 2 2 2 2 2 1 1 1 1 1 #>"},{"path":"/reference/predict_mini_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict_mini_batch — predict_mini_batch","title":"Predict_mini_batch — predict_mini_batch","text":"Prediction function mini-batch k-means applied matrix-like objects.","code":""},{"path":"/reference/predict_mini_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict_mini_batch — predict_mini_batch","text":"","code":"predict_mini_batch(data, CENTROIDS)"},{"path":"/reference/predict_mini_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict_mini_batch — predict_mini_batch","text":"data matrix-like objectcontaining numeric integer data (obseravtions rows, variables columns). CENTROIDS matrix initial cluster centroids. rows CENTROIDS matrix equal number clusters columns equal columns data.","code":""},{"path":"/reference/predict_mini_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict_mini_batch — predict_mini_batch","text":"returns vector clusters.","code":""},{"path":"/reference/predict_mini_batch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict_mini_batch — predict_mini_batch","text":"function takes data output centroids returns clusters. implementation relies heavily MiniBatchKmeans implementation. provide ability work matrix-like objects base matrices (e.g, DelayedMatrix HDF5Matrix) beachmat library.","code":""},{"path":"/reference/predict_mini_batch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict_mini_batch — predict_mini_batch","text":"Yuwei Ni","code":""},{"path":"/reference/predict_mini_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict_mini_batch — predict_mini_batch","text":"","code":"data(iris) km = mini_batch(as.matrix(iris[,1:4]), clusters = 3,                batch_size = 10, max_iters = 10) #> Warning: iterations failed to converge, and the number of iterations is 10 clusters = predict_mini_batch(as.matrix(iris[,1:4]),                              CENTROIDS = km$centroids)"},{"path":"/reference/predict_mini_batch_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute labels for mini-batch k-means — predict_mini_batch_r","title":"Compute labels for mini-batch k-means — predict_mini_batch_r","text":"Given data matrix centroid matrix, assigns data point closest centroid, using block processing.","code":""},{"path":"/reference/predict_mini_batch_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute labels for mini-batch k-means — predict_mini_batch_r","text":"","code":"predict_mini_batch_r(   data,   centroids,   BPPARAM = BiocParallel::SerialParam(),   ... )"},{"path":"/reference/predict_mini_batch_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute labels for mini-batch k-means — predict_mini_batch_r","text":"data matrix-like object features row samples columns. centroids matrix coordinates centroids. BPPARAM parallel computations. See `BiocParallel` package. ... passed `blockApply`.","code":""},{"path":"/reference/predict_mini_batch_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute labels for mini-batch k-means — predict_mini_batch_r","text":"vector cluster labels observation.","code":""},{"path":"/reference/predict_mini_batch_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute labels for mini-batch k-means — predict_mini_batch_r","text":"","code":"data(iris) km <- mini_batch(as.matrix(iris[,1:4]), clusters = 3,                  batch_size = 10, max_iters = 100) predict_mini_batch_r(t(as.matrix(iris[,1:4])), km$centroids) #>   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3 #> [112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3 #> [149] 3 2"}]
